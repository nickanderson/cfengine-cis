bundle agent cis_configure
#@ Central configuration file for the CIS framework.
#@
#@ The following parameters have to be set, and mean the following:
#@
#@ cache: if true, the framework works in cached mode and intermediately saves the results
#@        in $(sys.workdir)/tmp/CIS.csv for caching.
#@ interval: in case cache==true, the bundles will only be called every $(interval) minutes.
#@           At intermediate runs of cf-agent, the classes are "replayed" from the cache.
#@ grace: In cached mode, the classes are set persistent. Set grace in a way that
#@        a single non cached run will not take longer than grace-interval minutes.
#@        In case this is not true, the worst thing that happens is that sone benchmarks
#@        are not set correctly in the exeeding time.
#@ enforce: (try to) enforce these sections.
#@ blacklist: to not report these benchmarks back to the mission portal. They will not
#@            be surpreesed in the .../CIS.csv cache file, though.
#@
#@ TODO: have a not_run slist which prohibits running these benchmarks alltogether.
{

vars:

   # define variables in decreasing priority", bare in mind to use the version with
   # not(isvariable()) as stanza
   !any::
      # cloud installations, quite small FS
      # "cache"       string => "true";
      # "interval"    string => "60";
      # "grace"       string => "120";
      # "enforce"     slist  => { "1_2_2", "1_2_3", "1_5_1", "1_5_2", "1_6_1",
      #                           "1_6_2", "2_1_1", "2_1_10", "2_1_12", "2_1_13",
      #                           "2_1_14", "2_1_15", "2_1_16", "2_1_17", "2_1_18",
      #                           "2_1_2", "2_1_3", "2_1_4", "2_1_5", "2_1_6", "2_1_7",
      #                           "2_1_8", "2_1_9", "3_1", "3_16a", "3_2a", "3_2b",
      #                           "3_3", "3_5", "3_6", "3_6b", "3_6c", "3_6d", "4_1_1",
      #                           "4_1_2", "4_1_2b", "4_2_1", "4_2_1b", "4_2_2", "4_2_2b",
      #                           "4_2_4", "4_2_4b", "4_2_5", "4_2_6", "4_2_8", "4_5_3",
      #                           "4_5_5", "5_1_1", "5_1_2", "5_1_5", "6_1_1", "6_1_2",
      #                           "6_1_3", "6_1_4", "6_1_5", "6_1_6", "6_1_7", "6_1_8",
      #                           "6_1_9", "6_2_1", "6_2_10", "6_2_11", "6_2_12a", "6_2_12b",
      #                           "6_2_14", "6_2_2", "6_2_3", "6_2_4", "6_2_5", "6_2_6",
      #                           "6_2_7", "6_2_8", "6_2_9", "6_3_1", "6_3_2", "6_3_2b",
      #                           "6_3_2c", "6_3_2d", "6_3_2e", "6_3_2f", "6_3_4", "6_4",
      #                           "6_5", "7_1_1", "7_1_2", "7_1_3", "7_2", "7_3", "7_4a",
      #                           "7_4b", "7_5", "8_1a", "8_1b", "8_1c", "8_2a", "8_2b",
      #                           "8_2c", "9_1_2", "9_1_3", "9_1_4", "9_1_5", "9_1_6", "9_1_7",
      #                           "9_1_8", "9_1_9", "9_2_1", "9_2_10", "9_2_11", "9_2_12",
      #                           "9_2_13", "9_2_14", "9_2_15", "9_2_16", "9_2_17", "9_2_18",
      #                           "9_2_19", "9_2_2", "9_2_20", "9_2_3", "9_2_4", "9_2_5", "9_2_7",
      #                           "9_2_8", "9_2_9" };
      # "blacklist"   slist  =>  { "1_1_1", "1_1_2", "1_1_10", "1_1_10b",
      #                            "1_1_14", "1_1_15", "1_1_16", "1_1_16b",
      #                            "1_1_2b", "1_1_3", "1_1_3b", "1_1_4", "1_1_4b",
      #                            "1_1_5", "1_1_6", "1_1_7", "1_1_8", "1_1_9", "4_7" };

    any::

      # Here we set the values based on user definitions in def. We expect these
      # are most likely to be defined by the augments file.

      "cache"
        string => "$(def.CIS_cache)",
        if => isvariable("def.CIS_cache"),
        comment => "We want uses to be able to define this from the augments
                    file";
      "interval"
        string => "$(def.CIS_interval)",
        if => isvariable("def.CIS_interval"),
        comment => "We want uses to be able to define this from the augments
                    file";
      "grace"
        string => "$(def.CIS_grace)",
        if => isvariable("def.CIS_grace"),
        comment => "We want uses to be able to define this from the augments
                    file";
      "enforce"
        slist => { @(def.CIS_enforce) },
        if => isvariable("def.CIS_enforce"),
        comment => "We want uses to be able to define this from the augments
                    file";
      "blacklist"
        slist => { @(def.CIS_blacklist) },
        if => isvariable("def.CIS_blacklist"),
        comment => "We want uses to be able to define this from the augments
                    file";

      # Here we provide sane defaults if values were not already configured.

      "cache"
        string => "true",
        ifvarclass => not(isvariable("cache")),
        comment => "By default we cache the results of our scan so we don't have
                    to do all of the work each time and we report on the cached
                    values.";

      "interval"
        string => "1440",
        ifvarclass => not(isvariable("interval")),
        comment => "By default we will re-validate each compliance rule no more
                    than once a day.";

      "grace"
        string => "1620",
        ifvarclass => not(isvariable("grace")),
        comment => "We assume the scan will not run more than 3 hours ( 180min =
                   1620-1440).";

      "enforce"
        slist  => { },
        ifvarclass => not(isvariable("enforce")),
        comment => "We don't want to automatically re mediate anything by default
                    as it could be dangerous.";

      "blacklist"
        slist  => { },
        ifvarclass => not(isvariable("blacklist")),
        comment => "By default we don't skip any specific compliance checks.";

}
