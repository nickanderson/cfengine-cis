bundle agent cis_filepermissions
#@
#@
#@
{

meta:
   "tags"  slist => {
                    "security",
                    "CISENFORCE",
                    "CIS",
                    "reporting"
                    },
      ifvarclass => isdir("$(this.promise_dirname)/data/$(sys.flavour)/");

  vars:
      "infile"   string => "$(this.promise_dirname)/data/$(sys.flavour)/$(this.bundle).json";

  classes:
      "infile_exists"     expression => fileexists("$(infile)");

      # general debugging class specific for a bundle, should work with 3.6 & 3.7
      "DEBUG_THIS_BUNDLE" or => { "DEBUG", "DEBUG_$(this.bundle)" };

  vars:

   "interval" string => "$(cis_configure.interval)";

   infile_exists::
      # read input
      "cis_permissions" data => readdata( $(infile), "auto");

      # get all paragraphs covered, and give it a meta tag to collect all
      # paragraphs covered by general methods
      "paragraphs"
        slist => getindices("cis_permissions"),
        meta  => { "CIS" , "CISSECTIONS" };

   DEBUG_THIS_BUNDLE::
      "CISFOUND"  slist  => classesmatching("CIS_finding_.*", "defined_from=$(this.bundle)" );
      "s_paragraphs" string => join(", ", paragraphs);


methods:
   "$(paragraphs)" usebundle  => CIS_mog_report("$(paragraphs)",
                                                "$(cis_permissions[$(paragraphs)][filename])",
                                                "$(cis_permissions[$(paragraphs)][score])",
                                                "$(cis_permissions[$(paragraphs)][level])",
                                                "$(cis_permissions[$(paragraphs)][comment])",
                                                "$(cis_permissions[$(paragraphs)][mode])",
                                                "$(cis_permissions[$(paragraphs)][uid])",
                                                "$(cis_permissions[$(paragraphs)][gid])");
   CISENFORCE::
      "$(paragraphs)" usebundle  => CIS_mog_enforce("$(cis_permissions[$(paragraphs)][filename])",
                                                    "$(cis_permissions[$(paragraphs)][mode])",
                                                    "$(cis_permissions[$(paragraphs)][uid])",
                                                    "$(cis_permissions[$(paragraphs)][gid])"),
                      ifvarclass => classmatch("CISENFORCE_$(paragraphs)");

reports:
   DEBUG_THIS_BUNDLE::
      "DEBUG $(this.bundle): Data = '$(infile)'";
      "DEBUG $(this.bundle): Covers '$(s_paragraphs)'";
      "DEBUG $(this.bundle): CISFOUND $(CISFOUND)";
      "DEBUG $(this.bundle): CISENFORCE_$(paragraphs) is set"
        ifvarclass => classmatch("CISENFORCE_$(paragraphs)");
}

bundle agent CIS_mog_enforce(file,
                             mode,
                             owner,
                             group)
#@
#@
#@
{

files:
   "$(file)"
       create     => "false",
       perms      => m("$(mode)"),
       ifvarclass => not(strcmp("","$(mode)"));
   "$(file)"
       create     => "false",
       perms      => owner("$(owner)"),
       ifvarclass => not(strcmp("","$(owner)"));
   "$(file)"
       create     => "false",
       perms      => og("$(owner)","$(group)"),
       ifvarclass => not(strcmp("","$(group)"));

}
