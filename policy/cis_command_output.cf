bundle agent cis_command_output
# @brief Call commands and set classes due to "execresult" - NB the commands can
# be shell scripts, too.
#
# The given regexp is supposed to be anchored and match the whole output of the
# command, i.e. if you look for a single line SEARCHEDFOR, a good regexp would
# be .*$(const.n)SEARCHEDFOR$(const.n)
#
# @ TODO: respect the class "CIS_AVOID_HIGH_LOAD" and avoid sections/commands with "high_load": "true"
{

  meta:
      # We only tag the bundle if the system flavor specific data files exist.
      "tags"
        slist => {
                   "CIS",
                   "security",
                   "reporting"
                  },
        ifvarclass => isdir("$(this.promise_dirname)/data/$(sys.flavour)/");

  vars:

      "infile"       string => "$(this.promise_dirname)/data/$(sys.flavour)/$(this.bundle).json";

  classes:

      "infile_exists" expression => fileexists("$(infile)");

  vars:

    infile_exists::

      "input"
        data   => readdata("$(infile)","auto");

      "paragraphs"
        slist  => getindices("input"),
        meta   => { "CIS" , "CISSECTIONS" },
        comment => "We tag the paragraphs found in the datafile for reporting
                    purposes.";

  methods:

    infile_exists::

      "$(paragraphs)" usebundle => cis_command("$(paragraphs)",
                                               "$(input[$(paragraphs)][score])",
                                               "$(input[$(paragraphs)][level])",
                                               "$(input[$(paragraphs)][comment])",
                                               "$(input[$(paragraphs)][command])",
                                               "$(input[$(paragraphs)][regexp])",
                                               "$(input[$(paragraphs)][match])");
}


bundle agent cis_command(paragraph,
                         score,
                         level,
                         comment,
                         command,
                         regexp,
                         match)
#@
#@ Inspect the output of command for the occurrence of the rexpexp. The CIS_inventory_class
#@ is set in accordence to the "match" parameter.
#@
#@ If command has no heading /, it is supposed to be a shell script relative to
#@ $(this.promise_dirname)/$(sys.flavour)/scripts/ and is executed via /bin/sh
#@
{


vars:
   # in case an absolute file name is given, assume it to be executable
   "prefix" string => "",
        ifvarclass => regcmp("/.*","$(command)");

   # in case an absolute file name is *not* given, assume it to be relative to
   # the below, and interpret it with the system shell
   # TODO Should this really be prefixed with `/bin/sh`?

   "prefix" string => "/bin/sh $(this.promise_dirname)/$(sys.flavour)/scripts/",
        ifvarclass => not(regcmp("/.*","$(command)"));

   # generate output
   "output" string => execresult("$(prefix)/$(command)","noshell");
   "c"      string => canonify("$(command)-$(paragraph)");

classes:

   # finally, we are off to go = "(rmatch.match)|(!rmatch.!match)" = "(rmatch.match)|!(rmatch|match)"

   # c is just anxiety --> should work without
   # Here we define a class that indicates the regular expression did NOT match as expected and is therefore
   "go_$(c)" expression => regcmp( $(regexp), $(output) ),
             ifvarclass => strcmp( "false", $(match) );

   "go_$(c)" expression => not(regcmp("$(regexp)","$(output)")),
             ifvarclass => strcmp("true","$(match)");

   # general debugging class specific for a bundle, should work with 3.6 & 3.7
   "DEBUG_THIS_BUNDLE"
             or         => { "DEBUG" },
             ifvarclass => classmatch("DEBUG_$(this.bundle)");

methods:
   "setifneeded" usebundle  => CIS_set_inventory_class("$(paragraph)",
                                                       "$(score)",
                                                       "$(level)",
                                                       "$(this.bundle)",
                                                       "$(comment)"),
                 ifvarclass => classmatch("go_$(c)");   # done this way for 3.6 compatibility

reports:
  DEBUG_THIS_BUNDLE::
      "$(this.bundle) for $(paragraph): '$(command)' yields '$(output)'";

      "$(this.bundle) for $(paragraph): '$(regexp)' (tested for false)"
        ifvarclass => strcmp( "false", $(match));

      "$(this.bundle) for $(paragraph): '$(regexp)' (tested for true)"
        ifvarclass => strcmp( "true", $(match) );

      "$(this.bundle) observed '$(paragraph)' non-compliant"
        ifvarclass => canonify("go_$(c)");

      "$(this.bundle) observed '$(paragraph)' compliant"
        unless => canonify("go_$(c)");
}
