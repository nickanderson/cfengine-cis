bundle agent cis_userrelated
{

meta:
   "tags"  slist => {
                     "CIS",
                     "security",
                     "reporting"
                    },
      ifvarclass => isdir("$(this.promise_dirname)/data/$(sys.flavour)/");

vars:
   "infile"         string => "$(this.promise_dirname)/data/$(sys.flavour)/$(this.bundle).json";

   infile_exists::
     # read input
     "input"      data   => readjson("$(infile)","100K");

     "paragraphs"    slist => getindices("input"),
                     meta  => { "CIS" , "CISSECTIONS" };

     "duplicate_uid" string => $(paragraphs),
                 ifvarclass => strcmp("$(input[$(paragraphs)][part])","duplicate_uid");
     "duplicate_gid" string => $(paragraphs),
                 ifvarclass => strcmp("$(input[$(paragraphs)][part])","duplicate_gid");
     "duplicate_usernames" string => $(paragraphs),
                 ifvarclass => strcmp("$(input[$(paragraphs)][part])","duplicate_usernames");
     "duplicate_groupnames" string => $(paragraphs),
                 ifvarclass => strcmp("$(input[$(paragraphs)][part])","duplicate_groupnames");

   DEBUG_THIS_BUNDLE::
      "CISFOUND"  slist  => classesmatching(".*CIS.*");

classes:
   # platform OS specific needs to exist
   "infile_exists"     expression => fileexists("$(infile)");
   
   # general debugging class specific for a bundle, should work with 3.6 & 3.7
   "DEBUG_THIS_BUNDLE" or => { "DEBUG", "DEBUG_$(this.bundle)" };

methods:
   # duplicate data in /etc/passwd
   "duplicate_uid" usebundle  => CIS_set_inventory_class("$(duplicate_uid)",
                                                         "$(input[$(duplicate_uid)][score])",
                                                         "$(input[$(duplicate_uid)][level])",
                                                         "$(this.bundle)",
                                                         "$(input[$(duplicate_uid)][comment])"),
                   ifvarclass => islessthan(length("CIS_user_data.uuids"),length("CIS_user_data.userids"));

   # duplicate data in /etc/group
   "duplicate_gid" usebundle  => CIS_set_inventory_class("$(duplicate_gid)",
                                                         "$(input[$(duplicate_gid)][score])",
                                                         "$(input[$(duplicate_gid)][level])",
                                                         "$(this.bundle)",
                                                         "$(input[$(duplicate_gid)][comment])"),
                   ifvarclass => islessthan(length("CIS_user_data.ugids"),length("CIS_user_data.groupids"));

   # duplicate data in /etc/passwd
   "duplicate_usernames" usebundle  => CIS_set_inventory_class("$(duplicate_usernames)",
                                                               "$(input[$(duplicate_usernames)][score])",
                                                               "$(input[$(duplicate_usernames)][level])",
                                                               "$(this.bundle)",
                                                               "$(input[$(duplicate_usernames)][comment])"),
                   ifvarclass => islessthan(length("CIS_user_data.userids"),"$(CIS_user_data.passwd_length)");

   # duplicate data in /etc/group
   "duplicate_groupnames" usebundle  => CIS_set_inventory_class("$(duplicate_groupnames)",
                                                                "$(input[$(duplicate_groupnames)][score])",
                                                                "$(input[$(duplicate_groupnames)][level])",
                                                                "$(this.bundle)",
                                                                "$(input[$(duplicate_groupnames)][comment])"),
                   ifvarclass => islessthan(length("CIS_user_data.groupids"),"$(CIS_user_data.group_length)");

reports:
   DEBUG_THIS_BUNDLE::
      "$(this.bundle) duplicate_uid $(duplicate_uid)";
      "$(this.bundle) duplicate_gid $(duplicate_gid)";
      "$(this.bundle) duplicate_usernames $(duplicate_usernames)";
      "$(this.bundle) duplicate_groupnames $(duplicate_groupnames)";
      "$(this.bundle) CISFOUND $(CISFOUND)";
      "$(this.bundle) paragraphs $(paragraphs)";

}


bundle agent cis_user_nodotfiles
#@
#@ Check for users' dot-files which should not exist!
#@
#@ 
{

meta:
   "tags"  slist => {
                     "CIS",
                     "security",
                     "reporting"
                    },
      ifvarclass => isdir("$(this.promise_dirname)/data/$(sys.flavour)/");

vars:
   "infile"        string => "$(this.promise_dirname)/data/$(sys.flavour)/$(this.bundle).json";
   "interval"      string => "$(cis_wrapper.interval)";   

   infile_exists::
      "input"      data   => readjson("$(infile)","100K");
      "paragraphs" slist  => getindices("input"),
                   meta   => { "CIS" , "CISSECTIONS" };

   any::
     "paragraph"  string => join("","paragraphs");

classes:
   # platform OS specific needs to exist
   "infile_exists"     expression => fileexists("$(infile)");
   
   # general debugging class specific for a bundle, should work with 3.6 & 3.7
   "DEBUG_THIS_BUNDLE" or => { "DEBUG", "DEBUG_$(this.bundle)" },
   
files:
   "$(CIS_user_data.passwd[$(CIS_user_data.userids)][5])/$(input[$(paragraphs)][file])"
       comment        => "no $(input[$(paragraphs)][file]) file should exist",
       delete         => tidy,
       file_select    => plain,
       classes        => if_notkept("cis_$(paragraphs)"),
       action         => fix_or_warn_on_interval("warn","$(interval)");

methods:
   "$(paragraphs)" usebundle  => CIS_set_inventory_class("$(paragraphs)",
                                                         "$(input[$(paragraphs)][score])",
                                                         "$(input[$(paragraphs)][level])",
                                                         "$(this.bundle)",
                                                         "$(input[$(paragraphs)][comment])"),
                   ifvarclass => classmatch("cis_$(paragraphs)");

reports:
   DEBUG_THIS_BUNDLE.cis1::
      "$(this.bundle) cis usebundle => CIS_set_inventory_class($(paragraph),$(score),$(level),$(this.bundle),$(comment))";

}

bundle agent cis_dotfilepermissions
#@
#@ Check for users' dot files with incorrect (too loose) permissions.
#@
#@
#@ Automatic remeditation: Yes
{

meta:
   "tags"  slist => {
                     "CIS",
                     "security",
                     "reporting"
                     },
      ifvarclass => isdir("$(this.promise_dirname)/data/$(sys.flavour)/");

vars:
   "infile"            string => "$(this.promise_dirname)/data/$(sys.flavour)/$(this.bundle).json";
   "interval"          string => "$(cis_wrapper.interval)";   
 

   infile_exists::
      "input"          data   => readdata("$(infile)","auto");
      "paragraphs"     slist  => getindices("input"),
                       meta   => { "CIS" , "CISSECTIONS" };
      "action[$(paragraphs)]"
                       string => "warn";  # might be overwritten below

   CISENFORCE.infile_exists::
      "action[$(paragraphs)]"
                       string => "fix",
                   ifvarclass => classmatch("CISENFORCE_$(paragraphs)");
					   
					   
classes:
   "infile_exists" expression => fileexists("$(infile)");

files:
   infile_exists::
      "$(CIS_user_data.passwd[$(CIS_user_data.userids)][5])/."
          comment        => "no writable dot files should exist",
          file_select    => by_name("$(input[$(paragraphs)][regexp])"),
          depth_search   => recurse("0"),
          classes        => if_notkept("cis_$(paragraphs)"),
          perms          => mo("$(input[$(paragraphs)][mode])","$(CIS_user_data.userids)"),
          ifvarclass     => not(strcmp("/sbin/nologin","$(CIS_user_data.passwd[$(CIS_user_data.userids)][6])")),
          action         => fix_or_warn_on_interval("$(action[$(paragraphs)])","$(interval)");

methods:
   "$(paragraphs)" usebundle  => CIS_set_inventory_class("$(paragraphs)",
                                                         "$(input[$(paragraphs)][score])",
                                                         "$(input[$(paragraphs)][level])",
                                                         "$(this.bundle)",
                                                         "$(input[$(paragraphs)][comment])"),
                   ifvarclass => classmatch("cis_$(paragraphs)");
}


bundle agent cis_no_2nd_root
#@
#@ Checks whether a second uid 0 userid is present.
#@
#@ Enforcement: No, and not planned (dangerous, should be done by hand)
#@
{

meta:
   "tags"  slist => {
                     "CIS",
                     "security",
                     "reporting"
                    },
      ifvarclass => isdir("$(this.promise_dirname)/data/$(sys.flavour)/");

vars:
   "infile"         string => "$(this.promise_dirname)/data/$(sys.flavour)/$(this.bundle).json";

   infile_exists::
     # read input
     "input"      data   => readdata("$(infile)","auto");

     "paragraphs"    slist => getindices("input"),
                     meta  => { "CIS" , "CISSECTIONS" };

     "noroots"    int    => countlinesmatching("[a-zA-Z0-9-]*:x:0*:.*","/etc/passwd");

classes:
   # platform OS specific needs to exist
   "infile_exists" expression => fileexists("$(infile)");

methods:
   "$(paragraphs)" usebundle  => CIS_set_inventory_class("$(paragraphs)",
                                                         "$(input[$(paragraphs)][score])",
                                                         "$(input[$(paragraphs)][level])",
                                                         "$(this.bundle)",
                                                         "$(input[$(paragraphs)][comment])"),
                   ifvarclass => isgreaterthan("$(noroots)","1");
}
