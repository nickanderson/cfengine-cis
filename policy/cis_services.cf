bundle agent cis_services
#@
#@ Enforce the state of the services specified in
#@ $(this.promise_dirname)/data/$(sys.flavour)/services.json
#@
#@ Act only if both the class CISENFORCE is set, and for EACH paragraph,
#@ CISENFORCE_PARAGRAPH.
#@ For instance, set CISENFORCE_2_1_12 on redhat_7 to disable chargen-dgram
#@
#@
#@ Known bugs: redhat_7:: rhnsd is still chkconfig, hence services promise does not work
#@ TODO: implement service enforcement
#@
{

meta:
   "tags"  slist => {
                     "CIS",
                     "security",
                     "reporting"
                     },
      ifvarclass => isdir("$(this.promise_dirname)/data/$(sys.flavour)/");

vars:

   # platform OS specific input file
   "infile"         string => "$(this.promise_dirname)/data/$(sys.flavour)/$(this.bundle).json";

   infile_exists::
      "cis_services" data  => readjson( $(infile), 100K);

      "paragraphs"   slist => getindices("cis_services"),
                     meta  => { "CIS" , "CISSECTIONS" };


      # Figure out which sections should have automatic remediation
      # (CISENFORECE_X_Y_Z)
      "tmp[$(paragraphs)]"
        string => "$(paragraphs)",
        ifvarclass => canonify("CISENFORCE_$(paragraphs)");

      # get intersection with those meant to be enforced to yield paragraphs_enforced
      "paragraphs_enforced"   slist => getindices("tmp");

      # split both in supposed_running==true and supposed_running==false
      "tmp2[$(paragraphs)]" string => "$(paragraphs)",
                        ifvarclass => strcmp("$(cis_services[$(paragraphs)][supposed_running])","true");
      "start_para"          slist  => getindices("tmp2");
      "enforce_start"       slist  => intersection("start_para","paragraphs_enforced");
      "stop_para"           slist  => difference("paragraphs","start_para");
      "enforce_stop"        slist  => intersection("stop_para","paragraphs_enforced");

      # With 'action_policy => "warn";' attached to a services (or methods for
      # that matter) promise the bundle actuation is not performed and so the
      # service is not checked.
      #
      # Enforcement should be in its own bundle and should leverage the same data.
      redhat_7::
         "service_list"     string => execresult('echo ; $(paths.systemctl) list-units --type service --state=running -q|\
                                                  $(paths.path[grep]) "\.service" | $(paths.path[cut]) -f 1 -d. ; echo',
                                                   "useshell");

classes:
   # platform OS specific needs to exist
   "infile_exists"     expression => fileexists("$(infile)");

   # general debugging class specific for a bundle, should work with 3.6 & 3.7
   "DEBUG_THIS_BUNDLE" or => { "DEBUG", "DEBUG_$(this.bundle)" };

services:
   CISENFORCE.infile_exists::
      # then loop only over those to be enforced started
      "$(cis_services[$(enforce_start)][service])"
        service_policy => "start",
        action         => fix_or_warn_on_interval("fix","60");
      # then loop only over those to be enforced stopped
      "$(cis_services[$(enforce_stop)][service])"
        service_policy => "stop",
        action         => fix_or_warn_on_interval("fix","60");

  methods:
    centos_6|redhat_6::

      "$(start_para)"
        usebundle  => CIS_set_inventory_class("$(start_para)",
                                              "$(cis_services[$(start_para)][score])",
                                              "$(cis_services[$(start_para)][level])",
                                              "$(this.bundle)",
                                              "$(cis_services[$(start_para)][comment])"),
        ifvarclass => not(returnszero( "$(paths.service) $(cis_services[$(start_para)][service]) status > /dev/null", "useshell")),
        comment => "We want to inventory services that are supposed to be running, but according to the service command are not.";

      "$(stop_para)"
        usebundle   => CIS_set_inventory_class("$(stop_para)",
                                               "$(cis_services[$(stop_para)][score])",
                                               "$(cis_services[$(stop_para)][level])",
                                               "$(this.bundle)",
                                               "$(cis_services[$(stop_para)][comment])"),
        ifvarclass => returnszero( "$(paths.service) $(cis_services[$(stop_para)][service]) status > /dev/null", "useshell"),
        comment => "We want to inventory services that should not be running, but according to the service command are.";


    centos_7|redhat_7::
      "$(start_para)"
        usebundle  => CIS_set_inventory_class("$(start_para)",
                                              "$(cis_services[$(start_para)][score])",
                                              "$(cis_services[$(start_para)][level])",
                                              "$(this.bundle)",
                                              "$(cis_services[$(start_para)][comment])"),
        ifvarclass => not(regcmp(".*[$(const.n)]$(cis_services[$(start_para)][service])$(const.n).*","$(service_list)")),
        comment => "We want to inventory services that should be running, but according to systemctl are not.";

      "$(stop_para)"
        usebundle => CIS_set_inventory_class("$(stop_para)",
                                             "$(cis_services[$(stop_para)][score])",
                                             "$(cis_services[$(stop_para)][level])",
                                             "$(this.bundle)",
                                             "$(cis_services[$(stop_para)][comment])"),
        ifvarclass => regcmp(".*$(const.n)$(cis_services[$(stop_para)][service])$(const.n).*","$(service_list)"),
        comment => "We want to inventory services that should not be running, but according to systemctl are.";

reports:
   DEBUG_THIS_BUNDLE::
      "$(this.bundle): service '$(cis_services[$(stop_para)][service])' should be stopped"
        ifvarclass => strcmp("$(cis_services[$(stop_para)][supposed_running])", "false");

      "$(this.bundle): service '$(cis_services[$(start_para)][service])' should be running"
        ifvarclass => strcmp("$(cis_services[$(start_para)][supposed_running])", "true");

      "$(this.bundle) paragraphs_enforced $(paragraphs_enforced)";
      "$(this.bundle) infile $(infile)";
      "$(this.bundle) infile $(infile) exists";
      "$(this.bundle) test";
      "$(this.bundle) start_para $(start_para)";
      "$(this.bundle) stop_para $(stop_para)";
      "$(this.bundle) service_list $(service_list)";
      "$(this.bundle) paragraphs $(paragraphs)";
      "$(this.bundle) paragraphs with cis_$(paragraphs) is set "
                ifvarclass => classmatch("cis_$(paragraphs)");
      "$(this.bundle) paragraphs $(paragraphs) supposed_running==false"
        ifvarclass     => strcmp("$(cis_services[$(paragraphs)][supposed_running])","false");
}
